@using TCSA.Models;
@using TCSA.Data;
@using TCSA.Services;
@inject IHttpContextAccessor httpContextAccessor

@page "/article/{ArticleId}"

<div class="container">
    <div class="jumbotron jumbotron-fluid">
        <div class="container">
            <h1 class="display-4"></h1>
        </div>
    </div>
</div>

<div class="container w-50 article-blocks-desktop">

    @if (IsCompleted)
    {
        <div class="card">
            <div class="card-body">
                You have completed this roadmap step.
            </div>
        </div>
    }
    @foreach (var block in Article.Blocks)
    {
        <div class="row pb-4">
            @if (!String.IsNullOrEmpty(block.ImgUrl))
            {
                <div class="col-2 icon-div">
                    <img src="img/@block.ImgUrl" width="70" alt="" class="align-middle">
                </div>
            }
            <div class="@GridStyle(!String.IsNullOrEmpty(block.ImgUrl))">
                <h1 class="article-section-title">@block.Title</h1>

                @foreach (var paragraph in block.Paragraphs)
                {
                    if (paragraph.IsPicture)
                    {
                        <div class="d-flex justify-content-center">
                            <img src="img/@paragraph.PictureUrl" width="600" class="img-fluid"/>
                        </div>
                        
                    }

                    if (paragraph.IsVideo)
                    {
                        <div class="video-paragraph d-flex justify-content-center embed-responsive embed-responsive-16by9">
                            <iframe class="embed-responsive-item" width="500" height="350" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                        </div>
                    }

                    if (!String.IsNullOrEmpty(paragraph.Body))
                    {
                        <p>@((MarkupString)(paragraph.Body))</p>
                    }
                }
            </div>
        </div>
    }

    @if (IsLogged)
    {
        <div class="row pb-5">
            <div class="col-2 icon-div">
                <img src="img/icons8-completed-task-96.png" width="70" alt="" class="align-middle">
            </div>
            <div class=col-10>
                @if (IsCompleted)
                {
                    <div class="card">
                        <div class="card-body">
                            This article was marked as read.
                        </div>
                    </div>
                }
                @if (!IsCompleted)
                {
                    <p>If you're following the roadmap, mark this article as read before moving to the next.</p>
                    <div class="user-buttons">
                        <btn class="btn btn-outline-secondary" type="button" @onclick="MarkAsComplete">Mark As Read</btn>
                    </div>
                }
            </div>
        </div>

    }

    @if (HasNext)
    {
        <div class="container user-buttons">
            <a href="article/@(Article.Id + 1)" target="_blank">
                <btn class="btn btn-outline-secondary" type="button">Next</btn>
            </a>
        </div>
    }
</div>
<div class="container article-blocks-mobile">
    @foreach (var block in Article.Blocks)
    {
        <div class="row">
            <div class="col d-flex justify-content-center icon-div">
                <img src="img/@block.ImgUrl" width="70" alt="" class="align-middle">
            </div>
        </div>
        <div class="row pb-4">
            <div class="col">
                <div class="col d-flex justify-content-center pb-3">
                    <h1 class="article-section-title">@block.Title</h1>
                </div>

                @foreach (var paragraph in block.Paragraphs)
                {
                    if (paragraph.IsPicture)
                    {
                        <img src="img/@paragraph.PictureUrl" width="500">
                    }

                    if (paragraph.IsVideo)
                    {
                        <div class="video-paragraph d-flex justify-content-center embed-responsive embed-responsive-16by9">
                            <iframe class="embed-responsive-item" width="500" height="350" src="@paragraph.VideoUrl" allowfullscreen></iframe>
                        </div>
                    }

                    if (!String.IsNullOrEmpty(paragraph.Body))
                    {
                        <p>@((MarkupString)(paragraph.Body))</p>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    [Inject]
    protected IUserService UserService { get; set; }
    private AppUser user;
    [Parameter]
    public string ArticleId { get; set; }
    public Article Article { get; set; }
    public bool IsLogged = false;
    public bool IsCompleted { get; set; }
    public bool HasNext { get; set; }
    public DashboardProject incomingDashboardProject = new();
    public List<int> GroupArticles = new List<int> { 5, 6, 7, 8 };
    public string ResultMessage = "";

    protected async override Task OnInitializedAsync()
    {
        Article = ArticlesHelper.GetArticles().Single(x => x.Id == int.Parse(ArticleId));
        //HasNext = GroupArticles.Contains(int.Parse(ArticleId));

        await GetUser();
    }

    protected async Task GetUser()
    {
        if (httpContextAccessor.HttpContext?.User != null)
        {
            var email = httpContextAccessor.HttpContext.User.Identity?.Name;
            if (!String.IsNullOrEmpty(email))
            {
                IsLogged = true;
            }

            try
            {
                user = await UserService.GetUser(email);

                if (user.DashboardProjects.Any(x => x.ProjectId == int.Parse(ArticleId)))
                {
                    incomingDashboardProject = user.DashboardProjects.Single(x => x.ProjectId == Article.Id);
                    IsCompleted = incomingDashboardProject.IsCompleted;
                }
                else
                {
                    IsCompleted = false;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    protected async Task MarkAsComplete()
    {
        var project = new DashboardProject
            {
                AppUserId = user.Id,
                GithubUrl = "Not required",
                ProjectId = int.Parse(ArticleId),
                IsCompleted = true
            };

        var response = await UserService.PostProject(project);

        if (response == 1)
        {
            ResultMessage = "Your project was submitted successfuly";

            await InvokeAsync(async () => { 
                await GetUser(); 
                StateHasChanged(); 
            });
        }
        else
        {
            ResultMessage = "There was an error when submitting your project";
        }
    }

    protected async Task MarkAsIncomplete()
    {
        var response = await UserService.MarkAsIncomplete(incomingDashboardProject);

        if (response == 1)
        {
            ResultMessage = "Your project was marked as incomplete";
            await InvokeAsync(async () => { 
                await GetUser(); 
                StateHasChanged(); 
            });
        }
        else
        {
            ResultMessage = "There was an error when marking your project as incomplete";
        }
    }

    private string GridStyle(bool hasIcon)
    {
        return hasIcon ? "col-10" : "col";
    }
}

<style>
    .jumbotron {
        background-image: url("../img/article-banner.jpg");
        background-size: cover;
    }

    .display-4 {
        height: 200px;
    }

    .icon-div {
        display: grid;
    }

    img {
        align-self: center;
    }

    .video-paragraph {
        padding: 20px 0;
    }

    .article-section-title {
        font-size: 24px;
        font-weight: 600;
    }

    .card {
        color: white;
        background-color: darkolivegreen !important;
        margin-bottom: 20px;
    }
</style>

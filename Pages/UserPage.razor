@page "/user"
@using Microsoft.AspNetCore.Identity;
@using TCSA.Data;
@using TCSA.Models;
@inject IHttpContextAccessor httpContextAccessor
@inject HttpClient Http

<div class="dashboard-header">
    @if (user != null)
    {
        <h1>@user.FirstName @user.LastName</h1>
        #region Roadmap
        <h3>My Roadmap</h3>
        <div class="row">
            <div class="col-xl-1 col-lg-1 text-center position relative">
                <a href="" target="_blank" @onclick="@OpenFoundationSteps" @onclick:preventDefault>
                    <img 
                        class="rounded-circle img-thumbnail projects-completed" 
                        src="img/icons8-foundation-100.png" />
                </a>
                <p>Foundations</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenConsoleSteps" @onclick:preventDefault>
                    <img 
                        class="rounded-circle img-thumbnail projects-completed" 
                        src="img/console-300x300.png" />
                </a>
                <p>Console Apps</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenJobSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail projects-completed"
                     src="img/icons8-permanent-job-96.png" />
                </a>
                <p>Apply for Jobs</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenFullStack" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail projects-completed"
                     src="img/icons8-permanent-job-96.png" />
                </a>
                <p>Full Stack</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenCloudSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail projects-completed"
                     src="img/icons8-cloud-connection-480.png" />
                </a>
                <p>Cloud Development</p>
            </div>
        </div>
        #endregion
        #region Foundation 
        if(foundationSteps)
        {
            <div class="row">
                <h3>Foundation Steps</h3>
                @foreach (var article in articles.Where(x => x.Area == Area.StartHere))
                {
                    <DashboardArticleCard Article="article" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseFoundationSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Console 
        if (consoleSteps)
        {
            <div class="row">
                <h3>Console Apps</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.Console))
                {
                    <DashboardProjectCard Project="project" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseConsoleSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Portfolio
        if (jobSteps)
        {
            <div class="row">
                <h3>Apply For Jobs</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.StartApplying))
                {
                    <DashboardProjectCard Project="project" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseJobSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Cloud
        if (cloudSteps)
        {
            <div class="row">
                <h3>Cloud Development</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.Azure))
                {
                    <DashboardProjectCard Project="project" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseCloudSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        @*<div class="row">
            <h3>Console Apps</h3>
            @foreach (var project in user.DashboardProjects)
            {
                <DashboardProjectCard Project="@projects.FirstOrDefault(x => x.Id ==project.ProjectId)" />
            }
        </div>*@
    }
</div>

<button class="btn btn-outline-secondary marginn" @onclick="OpenSubmitProjectForm">Submit Project</button>

@if (submitProject)
{
    <EditForm Model="@dashboardProject" OnValidSubmit="SubmitProject">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputSelect shadow rounded @bind-Value="dashboardProject.Id" class="form-select">
                <option selected>Open this select menu</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Area - @project.Title</option>
                }
            </InputSelect>
            <p>
                <label>
                    Github Url
                    <InputText class="form-control" @bind-Value="dashboardProject.GithubUrl" />
                </label>
            </p>
            <button class="btn btn-outline-secondary" type="submit">Submit</button>
        </div>
    </EditForm>
    <button class="btn btn-outline-secondary" @onclick="CloseSubmitProjectForm">Cancel</button>
}

@code {
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    public DashboardProject dashboardProject = new();
    public List<FrontEndFramework> frontEndFrameworks = new();

    private AppUser user;
    private List<Article>? articles;
    private List<Project>? projects;
    private bool submitProject = false;
    private bool foundationSteps = false;
    private bool consoleSteps = false;
    private bool jobSteps = false;
    private bool cloudSteps = false;

    protected override async Task OnInitializedAsync()
    {
        projects = ArticlesHelper.GetProjects();
        articles = ArticlesHelper.GetArticles();

        var email = httpContextAccessor.HttpContext.User.Identity.Name;

        try
        {
            user = await Http.GetFromJsonAsync<AppUser>($"https://localhost:7170/api/user/{email}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        frontEndFrameworks = 
        user.FrontEndFrameworks
        .Split(',')
        .Where(m => int.TryParse(m, out _))
        .Select(m => (FrontEndFramework)int.Parse(m))
        .ToList();

        foreach(var fef in frontEndFrameworks)
        {
            Console.WriteLine(fef);
        }
    }

    protected async void SubmitProject()
    {
        var project = new DashboardProject
            {
                AppUserId = user.Id,
                GithubUrl = dashboardProject.GithubUrl,
                ProjectId = dashboardProject.Id
            };

        var response = await Http.PostAsJsonAsync<DashboardProject>($"https://localhost:7170/api/user/", project);
    }

    protected async Task OpenSubmitProjectForm()
    {
        submitProject = true;
    }

    protected async Task CloseSubmitProjectForm()
    {
        submitProject = false;
    }

    protected async Task OpenFoundationSteps()
    {
        foundationSteps = true;
    }

    protected async Task CloseFoundationSteps()
    {
        foundationSteps = false;
    }

    protected async Task OpenConsoleSteps()
    {
        consoleSteps = true;
    }

    protected async Task CloseConsoleSteps()
    {
        consoleSteps = false;
    }

    protected async Task OpenJobSteps()
    {
        jobSteps = true;
    }

    protected void CloseJobSteps()
    {
        jobSteps = false;
    }

    protected async Task OpenCloudSteps()
    {
        cloudSteps = true;
    }

    protected void CloseCloudSteps()
    {
        cloudSteps = false;
    }
}

<style>
    .dashboard-header {
        margin-top: 100px;
    }

    .projects {
        max-width: 80px;
        -webkit-filter: grayscale(100%);
        -moz-filter: grayscale(100%);
        -o-filter: grayscale(100%);
        -ms-filter: grayscale(100%);
        filter: grayscale(100%);
    }

    .projects-completed {
        max-width: 80px;
    }
</style>

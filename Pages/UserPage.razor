@page "/user"
@using Microsoft.AspNetCore.Identity;
@using TCSA.Data;
@using TCSA.Models;
@using TCSA.Services;
@inject IHttpContextAccessor httpContextAccessor

<div class="dashboard-header">
    @if (user != null)
    {
        <h1>@user.FirstName @user.LastName</h1>
        #region Roadmap
        <h3>My Roadmap</h3>
        <div class="row">
            <div class="col-xl-1 col-lg-1 text-center position relative">
                <a href="" target="_blank" @onclick="@OpenFoundationSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail @(CheckIfAreaIsCompleted(Area.StartHere, false))"
                     src="img/icons8-foundation-100.png" />
                </a>
                <p>Foundations</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenConsoleSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail @(CheckIfAreaIsCompleted(Area.Console, false))"
                     src="img/console-300x300.png" />
                </a>
                <p>Console Apps</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenJobSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail @(CheckIfAreaIsCompleted(Area.StartApplying, false))"
                     src="img/icons8-permanent-job-96.png" />
                </a>
                <p>Apply for Jobs</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenFullStack" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail @(CheckIfAreaIsCompleted(null, true))"
                     src="img/icons8-full-stack-512.png" />
                </a>
                <p>Full Stack</p>
            </div>
            <div class="col-xl-1 col-lg-1 text-center">
                <a href="" target="_blank" @onclick="@OpenCloudSteps" @onclick:preventDefault>
                    <img class="rounded-circle img-thumbnail @(CheckIfAreaIsCompleted(Area.Azure, false))"
                     src="img/icons8-cloud-connection-480.png" />
                </a>
                <p>Cloud Development</p>
            </div>
        </div>
        #endregion
        #region Foundation
        if (foundationSteps)
        {
            <div class="row">
                <h3>Foundation Steps</h3>
                @foreach (var article in articles.Where(x => x.Area == Area.StartHere))
                {
                    <DashboardArticleCard Article="article"
                              IsComplete="@CheckIfProjectIsCompleted(article.Id)" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseFoundationSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Console
        if (consoleSteps)
        {
            <div class="row">
                <h3>Console Apps</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.Console))
                {
                    <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseConsoleSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Portfolio
        if (jobSteps)
        {
            <div class="row">
                <h3>Apply For Jobs</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.StartApplying))
                {
                    <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseJobSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region FullStack
        if (fullStackSteps)
        {
            <div class="row">
                <h3>Full Stack</h3>
                @if (frontEndFrameworks.Any())
                {
                    if (frontEndFrameworks.Contains(FrontEndFramework.MVC))
                    {
                        @foreach (var project in projects.Where(x => x.Area == Area.MVC))
                        {
                            <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                        }
                    }
                    else if (frontEndFrameworks.Contains(FrontEndFramework.Blazor))
                    {
                        @foreach (var project in projects.Where(x => x.Area == Area.Blazor))
                        {
                            <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                        }
                    }
                    else if (frontEndFrameworks.Contains(FrontEndFramework.React))
                    {
                        @foreach (var project in projects.Where(x => x.Area == Area.React))
                        {
                            <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                        }
                    }
                    else if (frontEndFrameworks.Contains(FrontEndFramework.Angular))
                    {
                        @foreach (var project in projects.Where(x => x.Area == Area.Angular))
                        {
                            <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                        }
                    }
                    else if (frontEndFrameworks.Contains(FrontEndFramework.MAUI))
                    {
                        @foreach (var project in projects.Where(x => x.Area == Area.MAUI))
                        {
                            <DashboardProjectCard Project="project"
                              IsComplete="@CheckIfProjectIsCompleted(project.Id)" />
                        }
                    }
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseJobSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        #region Cloud
        if (cloudSteps)
        {
            <div class="row">
                <h3>Cloud Development</h3>
                @foreach (var project in projects.Where(x => x.Area == Area.Azure))
                {
                    <DashboardProjectCard Project="project" />
                }
                <div class="col-lg-3 col-sm-1">
                    <button class="btn btn-outline-secondary marginn" @onclick="CloseCloudSteps">Close</button>
                </div>
            </div>
        }
        #endregion
        @*<div class="row">
    <h3>Console Apps</h3>
    @foreach (var project in user.DashboardProjects)
    {
    <DashboardProjectCard Project="@projects.FirstOrDefault(x => x.Id ==project.ProjectId)" />
    }
    </div>*@
    }
</div>

<button class="btn btn-outline-secondary marginn" @onclick="OpenSubmitProjectForm">Submit Project</button>

@if (submitProject)
{
    <EditForm Model="@dashboardProject" OnValidSubmit="SubmitProject">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <InputSelect shadow rounded @bind-Value="dashboardProject.Id" class="form-select">
                <option selected>Open this select menu</option>
                @foreach (var project in projects)
                {
                    <option value="@project.Id">@project.Area - @project.Title</option>
                }
            </InputSelect>
            <p>
                <label>
                    Github Url
                    <InputText class="form-control" @bind-Value="dashboardProject.GithubUrl" />
                    <InputText hidden class="form-control" @bind-Value="dashboardProject.AppUserId" />
                </label>
            </p>
            <button class="btn btn-outline-secondary" type="submit">Submit</button>
        </div>
    </EditForm>
    <button class="btn btn-outline-secondary" @onclick="CloseSubmitProjectForm">Cancel</button>
}

@code {
    [Inject]
    protected IUserService UserService { get; set; }

    [Parameter] public EventCallback OnValidSubmit { get; set; }
    public DashboardProject dashboardProject = new();
    public List<FrontEndFramework> frontEndFrameworks = new();

    private AppUser user;
    private List<Article>? articles;
    private List<Project>? projects;
    private bool submitProject = false;
    private bool foundationSteps = false;
    private bool consoleSteps = false;
    private bool jobSteps = false;
    private bool cloudSteps = false;
    private bool fullStackSteps = false;
    private string isCompleteClass = "projects-incomplete";

    protected override async Task OnInitializedAsync()
    {
        dashboardProject.AppUserId = "";
        projects = ArticlesHelper.GetProjects();
        articles = ArticlesHelper.GetArticles();

        var email = httpContextAccessor.HttpContext.User.Identity.Name;

        try
        {
            user = await UserService.GetUser(email);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

        frontEndFrameworks =
        user.FrontEndFrameworks
        .Split(',')
        .Where(m => int.TryParse(m, out _))
        .Select(m => (FrontEndFramework)int.Parse(m))
        .ToList();

        foreach (var fef in frontEndFrameworks)
        {
            Console.WriteLine(fef);
        }
    }

    protected async Task SubmitProject()
    {
        var project = new DashboardProject
            {
                AppUserId = user.Id,
                GithubUrl = dashboardProject.GithubUrl,
                ProjectId = dashboardProject.Id,
                IsCompleted = true
            };

        UserService.PostProject(project);
    }

    protected bool CheckIfProjectIsCompleted(int projectId)
    {
        if (!user.DashboardProjects.Any(x => x.ProjectId == projectId))
        {
            return false;
        }

        var project = user.DashboardProjects.Single(x => x.ProjectId == projectId);

        if (project.IsCompleted)
        {
            return true;
        }

        return false;
    }

    protected string CheckIfAreaIsCompleted(Area? area, bool isFullStack)
    {
        if (area != Area.StartHere)
        {
            if (!isFullStack)
            {
                var projectIds = projects.Where(x => x.Area == area).Select(x => x.Id);

                foreach (int id in projectIds)
                {
                    if (!user.DashboardProjects.Any(x => x.ProjectId == id))
                    {
                        return "incomplete-area";
                    }

                    if (!user.DashboardProjects.Single(x => x.ProjectId == id).IsCompleted)
                    {
                        return "incomplete-area";
                    }
                }
            } 
            else
            {
                var fullstackAreas = new List<Area>
            {
                Area.React,
                Area.MVC,
                Area.Angular,
                Area.Blazor,
                Area.MAUI
            };

                foreach (var a in fullstackAreas)
                {
                    var fullStackProjectIds = projects.Where(x => x.Area == a).Select(x => x.Id);
                    var completedCount = 0;

                    foreach (int id in fullStackProjectIds)
                    {
                        if (user.DashboardProjects.Any(x => x.ProjectId == id) && user.DashboardProjects.Single(x => x.ProjectId == id).IsCompleted)
                        {
                            completedCount += 1;
                        }
                    }

                    if (completedCount == fullStackProjectIds.Count())
                    {
                        return "complete-area";
                    } 
                }

                return "incomplete-area";
            }
        } 
        else
        {
            var articleIds = articles.Where(x => x.Area == Area.StartHere).Select(x => x.Id);

            foreach (int id in articleIds)
            {
                if (!user.DashboardProjects.Any(x => x.ProjectId == id) || !user.DashboardProjects.Single(x => x.ProjectId == id).IsCompleted)
                {
                    return "incomplete-area";
                }
            }
        }

        return "complete-area";
    }

    protected void OpenSubmitProjectForm()
    {
        submitProject = true;
    }

    protected void CloseSubmitProjectForm()
    {
        submitProject = false;
    }

    protected void OpenFoundationSteps()
    {
        foundationSteps = true;
    }

    protected void CloseFoundationSteps()
    {
        foundationSteps = false;
    }

    protected void OpenConsoleSteps()
    {
        consoleSteps = true;
    }

    protected void CloseConsoleSteps()
    {
        consoleSteps = false;
    }

    protected void OpenJobSteps()
    {
        jobSteps = true;
    }

    protected void CloseJobSteps()
    {
        jobSteps = false;
    }

    protected void OpenCloudSteps()
    {
        cloudSteps = true;
    }

    protected void CloseCloudSteps()
    {
        cloudSteps = false;
    }

    protected void OpenFullStack()
    {
        fullStackSteps = true;
    }

    protected void CloseFullStack()
    {
        fullStackSteps = false;
    }
}

<style>
    .dashboard-header {
        margin-top: 100px;
    }

    .incomplete-area {
        max-width: 80px;
        -webkit-filter: grayscale(100%);
        -moz-filter: grayscale(100%);
        -o-filter: grayscale(100%);
        -ms-filter: grayscale(100%);
        filter: grayscale(100%);
    }

    .complete-area {
        max-width: 80px;
    }
</style>
